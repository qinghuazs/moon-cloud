<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.moon.cloud.user.mapper.UserMapper">

    <!-- 用户结果映射 -->
    <resultMap id="BaseResultMap" type="com.moon.cloud.user.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password_hash" property="passwordHash" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="avatar_url" property="avatarUrl" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="google_id" property="googleId" jdbcType="VARCHAR"/>
        <result column="provider_type" property="providerType" jdbcType="VARCHAR"/>
        <result column="is_email_verified" property="isEmailVerified" jdbcType="BOOLEAN"/>
        <result column="bio" property="bio" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="TINYINT"/>
        <result column="birthday" property="birthday" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="last_login_at" property="lastLoginAt" jdbcType="TIMESTAMP"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 用户角色结果映射 -->
    <resultMap id="UserWithRolesResultMap" type="com.moon.cloud.user.entity.User" extends="BaseResultMap">
        <collection property="roles" ofType="com.moon.cloud.user.entity.Role">
            <id column="role_id" property="id" jdbcType="BIGINT"/>
            <result column="role_name" property="roleName" jdbcType="VARCHAR"/>
            <result column="role_code" property="roleCode" jdbcType="VARCHAR"/>
            <result column="role_description" property="description" jdbcType="VARCHAR"/>
            <result column="role_status" property="status" jdbcType="TINYINT"/>
        </collection>
    </resultMap>

    <!-- 根据用户名查询用户（包含角色信息） -->
    <select id="selectUserWithRolesByUsername" resultMap="UserWithRolesResultMap">
        SELECT
            u.id,
            u.username,
            u.password_hash,
            u.email,
            u.phone,
            u.nickname,
            u.avatar_url,
            u.status,
            u.google_id,
            u.provider_type,
            u.is_email_verified,
            u.last_login_at,
            u.created_at,
            u.updated_at,
            r.id as role_id,
            r.role_name as role_name,
            r.role_code as role_code,
            r.description as role_description,
            r.status as role_status
        FROM sys_user u
        LEFT JOIN sys_user_role ur ON u.id = ur.user_id
        LEFT JOIN sys_role r ON ur.role_id = r.id AND r.status = 1
        WHERE u.username = #{username}
          AND u.status = 1
    </select>

    <!-- 根据用户名查询用户（包含角色信息） -->
    <select id="selectUserWithRolesByEmail" resultMap="UserWithRolesResultMap">
        SELECT
        u.id,
        u.username,
        u.password_hash,
        u.email,
        u.phone,
        u.nickname,
        u.avatar_url,
        u.status,
        u.google_id,
        u.provider_type,
        u.is_email_verified,
        u.last_login_at,
        u.created_at,
        u.updated_at,
        r.id as role_id,
        r.role_name as role_name,
        r.role_code as role_code,
        r.description as role_description,
        r.status as role_status
        FROM sys_user u
        LEFT JOIN sys_user_role ur ON u.id = ur.user_id
        LEFT JOIN sys_role r ON ur.role_id = r.id AND r.status = 1
        WHERE u.email = #{email}
        AND u.status = 1
    </select>

    <!-- 分页查询用户列表（包含角色信息） -->
    <select id="selectUserPageWithRoles" resultMap="UserWithRolesResultMap">
        SELECT
            u.id,
            u.username,
            u.password_hash,
            u.email,
            u.phone,
            u.nickname,
            u.avatar_url,
            u.bio,
            u.gender,
            u.birthday,
            u.address,
            u.status,
            u.google_id,
            u.provider_type,
            u.is_email_verified,
            u.last_login_at,
            u.created_at,
            u.updated_at,
            r.id as role_id,
            r.role_name as role_name,
            r.role_code as role_code,
            r.description as role_description,
            r.status as role_status
        FROM sys_user u
        LEFT JOIN sys_user_role ur ON u.id = ur.user_id
        LEFT JOIN sys_role r ON ur.role_id = r.id AND r.status = 1
        WHERE 1=1
        <if test="username != null and username != ''">
            AND u.username LIKE CONCAT('%', #{username}, '%')
        </if>
        <if test="email != null and email != ''">
            AND u.email LIKE CONCAT('%', #{email}, '%')
        </if>
        <if test="status != null">
            AND u.status = #{status}
        </if>
        ORDER BY u.created_at DESC
    </select>

    <!-- 根据角色ID查询用户列表 -->
    <select id="selectUsersByRoleId" resultMap="BaseResultMap">
        SELECT
            u.id,
            u.username,
            u.password_hash,
            u.email,
            u.phone,
            u.nickname,
            u.avatar_url,
            u.bio,
            u.gender,
            u.birthday,
            u.address,
            u.status,
            u.google_id,
            u.provider_type,
            u.is_email_verified,
            u.last_login_at,
            u.created_at,
            u.updated_at
        FROM sys_user u
        INNER JOIN sys_user_role ur ON u.id = ur.user_id
        WHERE ur.role_id = #{roleId}
          AND u.status = 1
        ORDER BY u.created_at DESC
    </select>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateStatus">
        UPDATE sys_user
        SET status = #{status}, updated_at = NOW()
        WHERE id IN
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId}
        </foreach>
    </update>

    <!-- 为用户分配默认角色 -->
    <insert id="assignDefaultRole">
        INSERT INTO sys_user_role (user_id, role_id, created_time)
        SELECT #{userId}, r.id, NOW()
        FROM sys_role r
        WHERE r.role_code = 'USER'
          AND r.status = 1
          AND NOT EXISTS (
            SELECT 1 FROM sys_user_role ur
            WHERE ur.user_id = #{userId} AND ur.role_id = r.id
          )
        LIMIT 1
    </insert>

    <!-- 搜索用户 -->
    <select id="searchUsers" resultMap="UserWithRolesResultMap">
        SELECT
            u.id,
            u.username,
            u.password_hash,
            u.email,
            u.phone,
            u.nickname,
            u.avatar_url,
            u.bio,
            u.gender,
            u.birthday,
            u.address,
            u.status,
            u.google_id,
            u.provider_type,
            u.is_email_verified,
            u.last_login_at,
            u.created_at,
            u.updated_at,
            r.id as role_id,
            r.role_name as role_name,
            r.role_code as role_code,
            r.description as role_description,
            r.status as role_status
        FROM sys_user u
        LEFT JOIN sys_user_role ur ON u.id = ur.user_id
        LEFT JOIN sys_role r ON ur.role_id = r.id AND r.status = 1
        WHERE 1=1
        <if test="keyword != null and keyword != ''">
            AND (
                u.username LIKE CONCAT('%', #{keyword}, '%')
                OR u.nickname LIKE CONCAT('%', #{keyword}, '%')
                OR u.email LIKE CONCAT('%', #{keyword}, '%')
                OR u.phone LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
        ORDER BY u.created_at DESC
    </select>

</mapper>